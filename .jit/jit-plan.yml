name: My plan
level: beginner
author: Jit
version: 0.1
owners:
  default: null
references:
  - https://www.jit.io
tags: []
items:
  - name: Scan your code for vulnerabilities (SAST)
    uses: >-
      jitsecurity-controls/jit-plans/items/code/item-code-vulnerability.yml@latest
  - name: Scan code for hard-coded secrets
    uses: >-
      jitsecurity-controls/jit-plans/items/code/item-secret-detection.yml@latest
  - name: Scan your web application for vulnerabilities
    uses: >-
      jitsecurity-controls/jit-plans/items/runtime/item-web-app-scanner.yml@latest

override:
  workflows:
    sast:
      jobs:
        static-code-analysis-semgrep-pro:
          steps:
            - name: Run Semgrep Code Pro Tier
              uses: ${{ context.config.custom_registry || registry.jit.io }}/control-semgrep-pro-alpine:sc-29159-semgrep-pro-control-remove-semgrep-oss-functionality
              with:
                args: ci --pro --json --metrics=off
                env:
                  SEMGREP_APP_TOKEN: ${{ jit_secrets.SEMGREP_TOKEN }}
        static-code-analysis-python-semgrep:
          steps:
            - name: Run Semgrep for Python
              uses: >-
                ${{ context.config.custom_registry || registry.jit.io }}/control-semgrep-alpine:main
              with:
                args: --config auto > /dev/null 2>&1 # sending the output to no-where
        
        static-code-analysis-js:
          steps:
            - name: Run Semgrep for JavaScript and TypeScript
              uses: >-
                ${{ context.config.custom_registry || registry.jit.io }}/control-semgrep-alpine:latest
              with:
                args: --config auto > /dev/null 2>&1 # sending the output to no-where
        
        static-code-analysis-java:
          steps:
            - name: Run semgrep java
              uses: ${{ context.config.custom_registry || registry.jit.io }}/control-semgrep-alpine:latest
              with:      
                args: --config auto > /dev/null 2>&1 # sending the output to no-where
        
        static-code-analysis-scala:
          steps: 
            - name: Run semgrep scala
              uses: ${{ context.config.custom_registry || registry.jit.io }}/control-semgrep-alpine:latest
              with:
                args: --config auto > /dev/null 2>&1 # sending the output to no-where

        static-code-analysis-go:
          steps:
            - name: Run Go
              uses: ${{ context.config.custom_registry || registry.jit.io }}/control-gosec-alpine:latest
              with:
                args: > /dev/null 2>&1

        static-code-analysis-kotlin:
          steps: 
            - name: Run semgrep kotlin
              uses: ${{ context.config.custom_registry || registry.jit.io }}/control-semgrep-alpine:latest
              with:
                args: --config auto > /dev/null 2>&1 # sending the output to no-where
        
        static-code-analysis-csharp:
          steps: 
            - name: Run semgrep csharp
              uses: ${{ context.config.custom_registry || registry.jit.io }}/control-semgrep-alpine:latest
              with:
                args: --config auto > /dev/null 2>&1 # sending the output to no-where

        static-code-analysis-swift:
          steps:   
            - name: Run semgrep swift
              uses: ${{ context.config.custom_registry || registry.jit.io }}/control-semgrep-alpine:latest
              with:
                args: --config auto > /dev/null 2>&1 # sending the output to no-where
        
        static-code-analysis-rust:
          steps:
            - name: Run semgrep rust
              uses: ${{ context.config.custom_registry || registry.jit.io }}/control-semgrep-alpine:latest
              with:
                args: --config auto > /dev/null 2>&1 # sending the output to no-where
